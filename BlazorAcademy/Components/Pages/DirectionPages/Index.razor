@page "/directions"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorAcademy.Models
@using BlazorAcademy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorAcademy.Data.BlazorAcademyContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="directions/create">Create New</a>
</p>

<QuickGrid Class="table" Items="currentPageItems.AsQueryable()">
    <PropertyColumn Sortable="true" Property="@(direction => direction.direction_name)" />

    <TemplateColumn Context="direction">
        <a href="@($"directions/edit?direction_id={direction.direction_id}")">Edit</a> |
        <a href="@($"directions/details?direction_id={direction.direction_id}")">Details</a> |
        <a href="@($"directions/delete?direction_id={direction.direction_id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<div style="margin-top: 10px;">
    <button @onclick="PrevPage" disabled="@(currentPage == 1)" style="width: 50px;">←</button>
    <span style="margin: 0 10px;">@currentPage / @totalPages</span>
    <button @onclick="NextPage" disabled="@(currentPage >= totalPages)" style="width: 50px;">→</button>
</div>

@code {
    private BlazorAcademyContext context = default!;
    private List<Direction> allRows = new();
    private List<Direction> currentPageItems = new();
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        allRows = context.Directions.ToList();
        UpdatePage();
    }

    private void UpdatePage()
    {
        totalPages = (int)Math.Ceiling(allRows.Count / (double)pageSize);
        currentPageItems = allRows
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
        StateHasChanged();
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePage();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePage();
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
