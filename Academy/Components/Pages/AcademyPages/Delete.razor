@page "/academies/delete"
@using Microsoft.EntityFrameworkCore
@using Academy.Models
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Academy</h2>
    <hr />
    @if (academy is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">discipline_name</dt>
            <dd class="col-sm-10">@academy.Discipline_name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">number_of_lessons</dt>
            <dd class="col-sm-10">@academy.Number_of_lessons</dd>
        </dl>
        <EditForm method="post" Model="academy" OnValidSubmit="DeleteAcademy" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(academy is null)">Delete</button> |
            <a href="/academies">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private AcademyModels? academy;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        academy = await context.Academy.FirstOrDefaultAsync(m => m.Id == Id);

        if (academy is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAcademy()
    {
        using var context = DbFactory.CreateDbContext();
        context.Academy.Remove(academy!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/academies");
    }
}
