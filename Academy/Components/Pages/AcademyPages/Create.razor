@page "/academies/create"
@using Microsoft.EntityFrameworkCore
@using Academy.Models
@inject IDbContextFactory<Academy.Data.AcademyContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Academy</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Academy" OnValidSubmit="AddAcademy" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="Discipline_name" class="form-label">Discipline_name:</label> 
                <InputText id="Discipline_name" @bind-Value="Academy.Discipline_name" class="form-control" /> 
                <ValidationMessage For="() => Academy.Discipline_name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="number_of_lessons" class="form-label">number_of_lessons:</label> 
                <InputNumber id="number_of_lessons" @bind-Value="Academy.Number_of_lessons" class="form-control" /> 
                <ValidationMessage For="() => Academy.Number_of_lessons" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/academies">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private AcademyModels Academy { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddAcademy()
    {
        using var context = DbFactory.CreateDbContext();
        context.Academy.Add(Academy);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/academies");
    }
}
